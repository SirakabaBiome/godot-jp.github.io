<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基本的な機能 on Godot Japan User Community</title><link>http://godot-jp.github.io/reference/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%A9%9F%E8%83%BD/</link><description>Recent content in 基本的な機能 on Godot Japan User Community</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><atom:link href="http://godot-jp.github.io/reference/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%A9%9F%E8%83%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>GDScriptの基本</title><link>http://godot-jp.github.io/reference/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%A9%9F%E8%83%BD/gdscript%E3%81%AE%E5%9F%BA%E6%9C%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://godot-jp.github.io/reference/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%A9%9F%E8%83%BD/gdscript%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid><description>Godot Engineの組み込みスクリプト言語であるGDScriptの基本的な使い方について記載します。
基本的な記述方法 extends Node var int_sanple = 0 var text_sample = &amp;#34;文字列&amp;#34; var int_sample2 :int = 1 func _ready(): pass GDSCriptは、大まかに３種類の要素で読み書きすることができます。
上記のサンプルを１行ずつ解説します。
クラスの拡張 extends Node extends NodeはNodeというクラスの拡張という意味です。
Nodeクラスが持つ機能をそのままに、新しいクラスを作ることになります。
変数 var int_sample = 0 var text_sample = &amp;#34;文字列&amp;#34; GDScriptは静的型付けの機能を持っています。
多くの言語は型を明示的に指定する必要がありますが、GDScriptは自動的に型を割り付けます。
これによりユーザーは型をあまり意識せずにプログラムを書くことができます。
明示的な型付け var int_sample2 :int = 1 型を意識したい場合もありますので、上記のように明示的に型を指定することもできます。
関数 func _ready(): pass GDScriptの関数はfuncにスペースを空けて関数名を記述します。
多くの言語のように{ }でブロックを作るのではなく、:のあとのインデントでブロックを作る構文になります。
関数にはクラスがもともと持っている組み込み関数と、ユーザーが作る独自関数の２種類があります。</description></item></channel></rss>