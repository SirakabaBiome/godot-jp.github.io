<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Godot Japan User Community</title>
    <link>https://godot-jp.github.io/</link>
    <description>Recent content on Godot Japan User Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 12 Jan 2023 06:00:15 +0900</lastBuildDate><atom:link href="https://godot-jp.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Controlノードについて</title>
      <link>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/control%E3%83%8E%E3%83%BC%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Thu, 15 Dec 2022 13:50:29 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/control%E3%83%8E%E3%83%BC%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>Godot EngineのControlノードはGUI（グラフィカルユーザーインターフェース）を作成する機能になります。 もちろん、同じCanvasItemを継承するNode2DでもGUIを作ることは可能ですが、レスポンシブなレイアウト機能や自動的なフォーカス機能などを持っているため、独自の</description>
    </item>
    
    <item>
      <title>入力機能について</title>
      <link>https://godot-jp.github.io/reference/%E5%85%A5%E5%8A%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E5%85%A5%E5%8A%9B%E6%A9%9F%E8%83%BD%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Sat, 10 Dec 2022 19:15:41 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/reference/%E5%85%A5%E5%8A%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E5%85%A5%E5%8A%9B%E6%A9%9F%E8%83%BD%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description>プロジェクトの入力マップ設定 Godot Engineはインプットマップとしてプロジェクト毎に入力の管理ができます。 インプットマップは、アクション名を設定し、そのアクションに、どの入力を割り当てるかという考え方になります。 デバイスからの入力を設定する プロジェクト設定からインプットマップタブを</description>
    </item>
    
    <item>
      <title>GDScriptの基本</title>
      <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/gdscript%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/gdscript%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description>Godot Engineの組み込みスクリプト言語であるGDScriptの基本的な使い方について記載します。 基本的な記述方法 extends Node var int_sanple = 0 var text_sample = &amp;#34;文字列&amp;#34; var int_sample2 :int = 1 func _ready(): pass GDSCriptは、大まかに３種類の要素で読み書きすることができます。 上記のサンプルを１行ずつ解説します。 ク</description>
    </item>
    
    <item>
      <title>Weekly Godot Japan 2023-01-12</title>
      <link>https://godot-jp.github.io/news/wgj-2023-01-12/</link>
      <pubDate>Thu, 12 Jan 2023 06:00:15 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/news/wgj-2023-01-12/</guid>
      <description>今週（2023年1月5日〜2023年1月12日）のGodot Engineに関するニュースをお届けします。
このニュースはraindrop.ioのブックマークに今週追加された関連性の高いニュース・リリース・ゲーム・ツール・およびその他をまとめ、自動的に配信されています。
おすすめやアイディアがある場合は、DiscussionのスレッドまたはGodot Japan Discordサーバー&gt;にコメントをいただければ反映します。 🎨チュートリアル &amp;#34;How to make Breath Of The Wild style Climbing in Godot!&amp;#34; を YouTube で見る In this video, I try an recreate the climbing system from the legend of Zelda: Breath of the wild in the Godot game engine! We go over my character controller and then the iterative design process I used to create the system in Godot! Source code for the project: https://github.com/LeonStansfield/Climbing_tutorial Follow me on Twitter: https://twitter.com/Leonstansfield0 And check out the game on Itch.io: https://leon-stansfield.itch.io/ Using particle shaders in #GodotEngine a pixel perfect disintegration effect can be created, here&amp;#39;s an overview of how to create an Undertale like death effect#gamedev #tutorial #pixelart pic.twitter.com/XBpx6yjmSC
&amp;mdash; Astridson💧 (@byastridson) January 6, 2023 👮公式 Dev snapshot: Godot 4.0 beta 11 First snapshot of the year, Godot 4.0 beta 11! We took a bit longer to prepare this beta as there were a number of fairly big GDScript refactoring PRs (needed to fix many bugs), which we wanted to merge all at once.</description>
    </item>
    
    <item>
      <title>週刊Godot Japan！ニュースの自動配信を開始</title>
      <link>https://godot-jp.github.io/news/news-20230111220920/</link>
      <pubDate>Wed, 11 Jan 2023 22:09:30 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/news/news-20230111220920/</guid>
      <description>Godotユーザーのみなさん、こんにちは。 2023年1月12日（木）15時頃から毎週更新される Weekly Godot Japan の記事配信が開始されます。 配信日が木曜日なのは 「日本でのパッケージゲームの発売日」 が基本的に木曜日だからです😋 約1年前に更新を止めてしまったThis Week in Godotからインスパイアさ</description>
    </item>
    
    <item>
      <title>Godot Japan User Community リリース</title>
      <link>https://godot-jp.github.io/news/release2023-1-10/</link>
      <pubDate>Thu, 05 Jan 2023 14:08:07 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/news/release2023-1-10/</guid>
      <description>Godot Japan User Communityの公式サイトをリリースしました。 サイトの説明については当サイトについてをご覧ください。 この記事では、当サイトの今後、成り立ちについて書きたいと思います。 サイト開設の経緯 私は2019年からGodot Engineを触り始め、様々なプロトタイプを作り、試してきま</description>
    </item>
    
    <item>
      <title>Godot Engineについて</title>
      <link>https://godot-jp.github.io/feature/</link>
      <pubDate>Thu, 05 Jan 2023 12:01:20 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/feature/</guid>
      <description>Godot Engineは、オープンソースのマルチプラットフォーム向けのWindows・Mac・Linuxで動作するゲームエンジンです。 エンジン自体のファイルサイズも動作も非常に軽く、ある程度低いスペックであってもプロジェクトを開始することができます。 バージョン管理ツールにも対応しやすく、</description>
    </item>
    
    <item>
      <title>ゲームパッド入力について</title>
      <link>https://godot-jp.github.io/reference/%E5%85%A5%E5%8A%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%91%E3%83%83%E3%83%89%E5%85%A5%E5%8A%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Tue, 20 Dec 2022 14:12:47 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/reference/%E5%85%A5%E5%8A%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%91%E3%83%83%E3%83%89%E5%85%A5%E5%8A%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>ゲームパッドとアクションの登録 入力機能についてで解説している通り、Godot Engineではアクションに対して複数の入力を登録することができます。 これにより、コードからはキーボードとゲームパッドの操作を、どちらも同じアクションで参照することができます。 このページでは、ゲームパッド</description>
    </item>
    
    <item>
      <title>画面レイアウトについて</title>
      <link>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E7%94%BB%E9%9D%A2%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Wed, 14 Dec 2022 14:11:39 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/reference/gui%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E7%94%BB%E9%9D%A2%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>Containerノードの基本 Container（コンテナ）ノードは、子ノードとしてコンテンツを持つことを前提としたノードです。 子ノードであるコンテンツを自動的にレイアウトすることを目的とした機能を持っています。 継承元のContainerノード自体はControlノードとほとんど</description>
    </item>
    
    <item>
      <title>プロジェクトの作成方法</title>
      <link>https://godot-jp.github.io/reference/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 10 Dec 2022 19:24:47 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/reference/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E6%96%B9%E6%B3%95/</guid>
      <description>インストール方法 公式サイトからダウンロード Godot Engineの公式サイトのダウンロードページから安定版をダウンロードします。 Zipファイルなので任意のパスに解凍し、godot_[バージョン]_stable_win.exeを起動します。 ! 当サイトではGodot Engine 4.xを基準にリファレン</description>
    </item>
    
    <item>
      <title>当サイトについて</title>
      <link>https://godot-jp.github.io/about/</link>
      <pubDate>Tue, 06 Dec 2022 08:38:26 +0900</pubDate>
      
      <guid>https://godot-jp.github.io/about/</guid>
      <description>Godot Japan User Communityはオープンソースのコミュニティサイトです。 本コミュニティは、静的サイトジェネレーター Hugo と Github Pages でホスティングされており、コミュニティメンバー（コントリビューター、メンテナー、コミュニティリーダー）によって本コミュニティの運営を行っています。 Godot Engine公式</description>
    </item>
    
    <item>
      <title>数値について</title>
      <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%95%B0%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%95%B0%E5%80%A4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>数値の基本 数値の型は、主にint型とfloat型になります。 単純に言えば、intは整数で、floatは小数点のある数字（実数）です。 int型の場合、64bitの数値として、-9223372036854775807 〜 9223372036854775807までの数値を扱う事ができます</description>
    </item>
    
    <item>
      <title>文字列について</title>
      <link>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://godot-jp.github.io/reference/gdscript%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>文字列の基本 文字列は非常に単純なデータ型であり、コピーオンライトという方式が取られています。 参照渡しができない型の場合、他の変数に渡すとすぐに複製されますが、Godot Engineの場合、渡された時点では参照渡しであり、変更があった場合に複製されます。 つまり、変更がない場合は複製</description>
    </item>
    
  </channel>
</rss>
